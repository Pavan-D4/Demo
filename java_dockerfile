pipeline {
    agent any
    environment {
        GIT_REPO_URL = 'https://github.com/Pavan-D4/spring-app.git'
        DOCKER_IMAGE = 'pavand4/welcome-home-app'
        DOCKER_TAG = "${BUILD_NUMBER}"
        DOCKER_CREDENTIALS = 'docker-cred'
        GIT_CREDENTIALS = 'git-cred'
    }

    stages {
        stage('Checkout Source Code') {
            steps {
                git branch: 'main',
                    url: "${GIT_REPO_URL}",
                    credentialsId: "${GIT_CREDENTIALS}"
            }
        }

        stage('Build Application') {
            steps {
                script {
                    def mvnHome = tool 'maven' // Use the name from Global Tool Configuration
                    sh "${mvnHome}/bin/mvn clean package"
                }
            }
        }
        
        stage('Push Artifacts to Git') {
    steps {
        script {
            withCredentials([usernamePassword(credentialsId: 'git-cred', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                sh """
                    git config user.name "${GIT_USER}"
                    git config user.email "youremail@example.com"
                    git add .
                    git commit -m "Pushed build artifacts from Jenkins" || true
                    git push https://${GIT_USER}:${GIT_PASS}@github.com/Pavan-D4/spring-app.git main || true
                """
            }
        }
    }
}

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .'
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKER_CREDENTIALS}") {
                        sh 'docker push ${DOCKER_IMAGE}:${DOCKER_TAG}'
                    }
                }
            }
        }

        stage('Deploy Application') {
            steps {
                sshagent(['docker']) {
                    sh '''
                        ssh -o StrictHostKeyChecking=no ubuntu@172.31.14.115 "docker pull ${DOCKER_IMAGE}:${DOCKER_TAG}"
                        ssh -o StrictHostKeyChecking=no ubuntu@172.31.14.115 "docker stop welcome-home-container || true && docker rm welcome-home-container || true"
                        ssh -o StrictHostKeyChecking=no ubuntu@172.31.14.115 "docker run -it -d --rm -p 3000:3000 --name welcome-home-container ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed!'
        }
    }
}
